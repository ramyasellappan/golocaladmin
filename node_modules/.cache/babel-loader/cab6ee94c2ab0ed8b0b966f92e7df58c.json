{"ast":null,"code":"var _jsxFileName = \"D:\\\\REACT PROJECTS\\\\my-app\\\\src\\\\containers\\\\Signup\\\\index.js\";\nimport React, { useState } from 'react';\nimport Layout from '../../components/Layout';\nimport { Container, Form, Row, Col, Button } from 'react-bootstrap';\nimport Input from '../../components/UI/Input';\nimport { Redirect } from 'react-router-dom';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { signup } from '../../actions';\nimport { Formik } from 'formik';\nimport * as yup from 'yup';\n/**\r\n* @author\r\n* @function Signup\r\n**/\n\nconst Signup = props => {\n  {\n    /*\r\n    const[firstName,setFirstName]=useState('');\r\n    const[lastName,setLastName]=useState('');\r\n    const[email,setEmail]=useState('');\r\n    const[password,setPassword]=useState('');\r\n    const[error,setError]=useState('');*/\n  }\n  const auth = useSelector(state => state.auth);\n  const user = useSelector(state => state.user);\n  const dispatch = useDispatch();\n  {\n    /*\r\n    const userSignup = (e) => {\r\n    e.preventDefault();\r\n        const user = {\r\n        firstName,lastName,email,password\r\n      }\r\n         dispatch(signup(user));\r\n    }\r\n    */\n  }\n  const schema = yup.object({\n    firstName: yup.string().required('First Name is Required'),\n    lastName: yup.string().required('Last Name is Required'),\n    email: yup.string().email('Invalid email address').required('Email is Required'),\n    password: yup.string().required('Password is Required').min(6, \"Password must be 6 characters at minimum\"),\n    phonenumber: yup.string().required('Phone number is Required').min(10, \"Valid Phone number required\")\n  });\n\n  if (auth.authenticate) {\n    return /*#__PURE__*/React.createElement(Redirect, {\n      to: '/',\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 12\n      }\n    });\n  }\n\n  {\n    /* if(user.loading){\r\n     return <p>Loading....!</p>\r\n    }\r\n    */\n  }\n  return /*#__PURE__*/React.createElement(Layout, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Container, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 7\n    }\n  }, user.message, /*#__PURE__*/React.createElement(Row, {\n    style: {\n      marginTop: '50px'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Col, {\n    md: {\n      span: 6,\n      offset: 3\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(Formik, {\n    validationSchema: schema,\n    onSubmit: values => {\n      dispatch(signup(values));\n    },\n    initialValues: {\n      firstName: '',\n      lastName: '',\n      email: '',\n      password: '',\n      phonenumber: ''\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 13\n    }\n  }, ({\n    handleSubmit,\n    handleChange,\n    handleBlur,\n    values,\n    touched,\n    isValid,\n    errors\n  }) => /*#__PURE__*/React.createElement(Form, {\n    onSubmit: handleSubmit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 19\n    }\n  }, /*#__PURE__*/React.createElement(Input, {\n    label: \"First Name\",\n    type: \"text\",\n    placeholder: \"firstName\",\n    name: \"firstName\",\n    value: values.firstName,\n    onChange: handleChange,\n    onBlur: handleBlur,\n    isInvalid: touched.firstName && errors.firstName,\n    errormessage: errors.firstName,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 21\n    }\n  }), /*#__PURE__*/React.createElement(Input, {\n    label: \"Last Name\",\n    type: \"text\",\n    placeholder: \"lastName\",\n    name: \"lastName\",\n    value: values.lastName,\n    onChange: handleChange,\n    onBlur: handleBlur,\n    isInvalid: touched.lastName && errors.lastName,\n    errormessage: errors.lastName,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 21\n    }\n  }), /*#__PURE__*/React.createElement(Input, {\n    label: \"Email\",\n    type: \"email\",\n    placeholder: \"email\",\n    name: \"email\",\n    value: values.email,\n    onChange: handleChange,\n    onBlur: handleBlur,\n    isInvalid: touched.email && errors.email,\n    errormessage: errors.email,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 21\n    }\n  }), /*#__PURE__*/React.createElement(Input, {\n    label: \"Password\",\n    type: \"password\",\n    placeholder: \"password\",\n    name: \"password\",\n    value: values.password,\n    onChange: handleChange,\n    onBlur: handleBlur,\n    isInvalid: touched.password && errors.password,\n    errormessage: errors.password,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 21\n    }\n  }), /*#__PURE__*/React.createElement(Input, {\n    label: \"Phone Number\",\n    type: \"phonenumber\",\n    placeholder: \"phonenumber\",\n    name: \"phonenumber\",\n    value: values.phonenumber,\n    onChange: handleChange,\n    onBlur: handleBlur,\n    isInvalid: touched.phonenumber && errors.phonenumber,\n    errormessage: errors.phonenumber,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 22\n    }\n  }), /*#__PURE__*/React.createElement(Button, {\n    type: \"submit\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 150,\n      columnNumber: 21\n    }\n  }, \"Submit\")))))));\n};\n\nexport default Signup;","map":{"version":3,"sources":["D:/REACT PROJECTS/my-app/src/containers/Signup/index.js"],"names":["React","useState","Layout","Container","Form","Row","Col","Button","Input","Redirect","useDispatch","useSelector","signup","Formik","yup","Signup","props","auth","state","user","dispatch","schema","object","firstName","string","required","lastName","email","password","min","phonenumber","authenticate","message","marginTop","span","offset","values","handleSubmit","handleChange","handleBlur","touched","isValid","errors"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAOC,MAAP,MAAmB,yBAAnB;AACA,SAASC,SAAT,EAAoBC,IAApB,EAA0BC,GAA1B,EAA+BC,GAA/B,EAAoCC,MAApC,QAAkD,iBAAlD;AACA,OAAOC,KAAP,MAAkB,2BAAlB;AACA,SAASC,QAAT,QAAyB,kBAAzB;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AACA,SAASC,MAAT,QAAuB,eAAvB;AACA,SAASC,MAAT,QAAuB,QAAvB;AACA,OAAO,KAAKC,GAAZ,MAAqB,KAArB;AACA;;;;;AAKA,MAAMC,MAAM,GAAIC,KAAD,IAAW;AACxB;AAAC;;;;;;AAKmC;AAIpC,QAAMC,IAAI,GAAGN,WAAW,CAACO,KAAK,IAAIA,KAAK,CAACD,IAAhB,CAAxB;AACA,QAAME,IAAI,GAAGR,WAAW,CAACO,KAAK,IAAIA,KAAK,CAACC,IAAhB,CAAxB;AACA,QAAMC,QAAQ,GAAGV,WAAW,EAA5B;AACA;AAAC;;;;;;;;;AAUA;AACD,QAAMW,MAAM,GAAGP,GAAG,CAACQ,MAAJ,CAAW;AACxBC,IAAAA,SAAS,EAAET,GAAG,CAACU,MAAJ,GACRC,QADQ,CACC,wBADD,CADa;AAGxBC,IAAAA,QAAQ,EAAEZ,GAAG,CAACU,MAAJ,GACPC,QADO,CACE,uBADF,CAHc;AAKxBE,IAAAA,KAAK,EAAEb,GAAG,CAACU,MAAJ,GACJG,KADI,CACE,uBADF,EAEJF,QAFI,CAEK,mBAFL,CALiB;AAQxBG,IAAAA,QAAQ,EAAEd,GAAG,CAACU,MAAJ,GACPC,QADO,CACE,sBADF,EAEPI,GAFO,CAEH,CAFG,EAEA,0CAFA,CARc;AAWxBC,IAAAA,WAAW,EAAEhB,GAAG,CAACU,MAAJ,GACVC,QADU,CACD,0BADC,EAEVI,GAFU,CAEN,EAFM,EAEF,6BAFE;AAXW,GAAX,CAAf;;AAmBA,MAAIZ,IAAI,CAACc,YAAT,EAAuB;AACrB,wBAAO,oBAAC,QAAD;AAAU,MAAA,EAAE,EAAE,GAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAP;AACD;;AAED;AAAC;;;;AAGA;AACD,sBACE,oBAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGZ,IAAI,CAACa,OADR,eAEE,oBAAC,GAAD;AAAK,IAAA,KAAK,EAAE;AAAEC,MAAAA,SAAS,EAAE;AAAb,KAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,GAAD;AAAK,IAAA,EAAE,EAAE;AAAEC,MAAAA,IAAI,EAAE,CAAR;AAAWC,MAAAA,MAAM,EAAE;AAAnB,KAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,MAAD;AACE,IAAA,gBAAgB,EAAEd,MADpB;AAEE,IAAA,QAAQ,EAAEe,MAAM,IAAI;AAAEhB,MAAAA,QAAQ,CAACR,MAAM,CAACwB,MAAD,CAAP,CAAR;AAA0B,KAFlD;AAGE,IAAA,aAAa,EAAE;AACbb,MAAAA,SAAS,EAAE,EADE;AAEbG,MAAAA,QAAQ,EAAE,EAFG;AAGbC,MAAAA,KAAK,EAAE,EAHM;AAIbC,MAAAA,QAAQ,EAAE,EAJG;AAKbE,MAAAA,WAAW,EAAE;AALA,KAHjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAWG,CAAC;AACAO,IAAAA,YADA;AAEAC,IAAAA,YAFA;AAGAC,IAAAA,UAHA;AAIAH,IAAAA,MAJA;AAKAI,IAAAA,OALA;AAMAC,IAAAA,OANA;AAOAC,IAAAA;AAPA,GAAD,kBASG,oBAAC,IAAD;AAAM,IAAA,QAAQ,EAAEL,YAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,KAAD;AACE,IAAA,KAAK,EAAC,YADR;AAEE,IAAA,IAAI,EAAC,MAFP;AAGE,IAAA,WAAW,EAAC,WAHd;AAIE,IAAA,IAAI,EAAC,WAJP;AAKE,IAAA,KAAK,EAAED,MAAM,CAACb,SALhB;AAME,IAAA,QAAQ,EAAEe,YANZ;AAOE,IAAA,MAAM,EAAEC,UAPV;AAQE,IAAA,SAAS,EAAEC,OAAO,CAACjB,SAAR,IAAqBmB,MAAM,CAACnB,SARzC;AASE,IAAA,YAAY,EAAEmB,MAAM,CAACnB,SATvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,eAYE,oBAAC,KAAD;AACE,IAAA,KAAK,EAAC,WADR;AAEE,IAAA,IAAI,EAAC,MAFP;AAGE,IAAA,WAAW,EAAC,UAHd;AAIE,IAAA,IAAI,EAAC,UAJP;AAKE,IAAA,KAAK,EAAEa,MAAM,CAACV,QALhB;AAME,IAAA,QAAQ,EAAEY,YANZ;AAOE,IAAA,MAAM,EAAEC,UAPV;AAQE,IAAA,SAAS,EAAEC,OAAO,CAACd,QAAR,IAAoBgB,MAAM,CAAChB,QARxC;AASE,IAAA,YAAY,EAAEgB,MAAM,CAAChB,QATvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAZF,eAwBE,oBAAC,KAAD;AACE,IAAA,KAAK,EAAC,OADR;AAEE,IAAA,IAAI,EAAC,OAFP;AAGE,IAAA,WAAW,EAAC,OAHd;AAIE,IAAA,IAAI,EAAC,OAJP;AAKE,IAAA,KAAK,EAAEU,MAAM,CAACT,KALhB;AAME,IAAA,QAAQ,EAAEW,YANZ;AAOE,IAAA,MAAM,EAAEC,UAPV;AAQE,IAAA,SAAS,EAAEC,OAAO,CAACb,KAAR,IAAiBe,MAAM,CAACf,KARrC;AASE,IAAA,YAAY,EAAEe,MAAM,CAACf,KATvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAxBF,eAoCE,oBAAC,KAAD;AACE,IAAA,KAAK,EAAC,UADR;AAEE,IAAA,IAAI,EAAC,UAFP;AAGE,IAAA,WAAW,EAAC,UAHd;AAIE,IAAA,IAAI,EAAC,UAJP;AAKE,IAAA,KAAK,EAAES,MAAM,CAACR,QALhB;AAME,IAAA,QAAQ,EAAEU,YANZ;AAOE,IAAA,MAAM,EAAEC,UAPV;AAQE,IAAA,SAAS,EAAEC,OAAO,CAACZ,QAAR,IAAoBc,MAAM,CAACd,QARxC;AASE,IAAA,YAAY,EAAEc,MAAM,CAACd,QATvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IApCF,eA+CG,oBAAC,KAAD;AACC,IAAA,KAAK,EAAC,cADP;AAEC,IAAA,IAAI,EAAC,aAFN;AAGC,IAAA,WAAW,EAAC,aAHb;AAIC,IAAA,IAAI,EAAC,aAJN;AAKC,IAAA,KAAK,EAAEQ,MAAM,CAACN,WALf;AAMC,IAAA,QAAQ,EAAEQ,YANX;AAOC,IAAA,MAAM,EAAEC,UAPT;AAQC,IAAA,SAAS,EAAEC,OAAO,CAACV,WAAR,IAAuBY,MAAM,CAACZ,WAR1C;AASC,IAAA,YAAY,EAAEY,MAAM,CAACZ,WATtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IA/CH,eA0DE,oBAAC,MAAD;AAAQ,IAAA,IAAI,EAAC,QAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cA1DF,CApBN,CADF,CADF,CAFF,CADF,CADF;AA+FD,CAlJD;;AAoJA,eAAef,MAAf","sourcesContent":["import React, { useState } from 'react'\r\nimport Layout from '../../components/Layout'\r\nimport { Container, Form, Row, Col, Button } from 'react-bootstrap';\r\nimport Input from '../../components/UI/Input';\r\nimport { Redirect } from 'react-router-dom';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { signup } from '../../actions';\r\nimport { Formik } from 'formik';\r\nimport * as yup from 'yup';\r\n/**\r\n* @author\r\n* @function Signup\r\n**/\r\n\r\nconst Signup = (props) => {\r\n  {/*\r\n  const[firstName,setFirstName]=useState('');\r\n  const[lastName,setLastName]=useState('');\r\n  const[email,setEmail]=useState('');\r\n  const[password,setPassword]=useState('');\r\nconst[error,setError]=useState('');*/}\r\n\r\n\r\n\r\n  const auth = useSelector(state => state.auth);\r\n  const user = useSelector(state => state.user)\r\n  const dispatch = useDispatch();\r\n  {/*\r\nconst userSignup = (e) => {\r\n  e.preventDefault();\r\n\r\n     const user = {\r\n       firstName,lastName,email,password\r\n     }\r\n\r\n      dispatch(signup(user));\r\n}\r\n*/}\r\n  const schema = yup.object({\r\n    firstName: yup.string()\r\n      .required('First Name is Required'),\r\n    lastName: yup.string()\r\n      .required('Last Name is Required'),\r\n    email: yup.string()\r\n      .email('Invalid email address')\r\n      .required('Email is Required'),\r\n    password: yup.string()\r\n      .required('Password is Required')\r\n      .min(6, \"Password must be 6 characters at minimum\"),\r\n    phonenumber: yup.string()\r\n      .required('Phone number is Required')\r\n      .min(10, \"Valid Phone number required\"),\r\n\r\n\r\n\r\n  });\r\n\r\n  if (auth.authenticate) {\r\n    return <Redirect to={'/'} />\r\n  }\r\n\r\n  {/* if(user.loading){\r\n    return <p>Loading....!</p>\r\n  }\r\n*/}\r\n  return (\r\n    <Layout>\r\n      <Container >\r\n        {user.message}\r\n        <Row style={{ marginTop: '50px' }}>\r\n          <Col md={{ span: 6, offset: 3 }}>\r\n            <Formik\r\n              validationSchema={schema}\r\n              onSubmit={values => { dispatch(signup(values)) }}\r\n              initialValues={{\r\n                firstName: '',\r\n                lastName: '',\r\n                email: '',\r\n                password: '',\r\n                phonenumber: '',\r\n              }}\r\n            >\r\n              {({\r\n                handleSubmit,\r\n                handleChange,\r\n                handleBlur,\r\n                values,\r\n                touched,\r\n                isValid,\r\n                errors,\r\n              }) => (\r\n                  <Form onSubmit={handleSubmit}>\r\n                    <Input\r\n                      label=\"First Name\"\r\n                      type=\"text\"\r\n                      placeholder=\"firstName\"\r\n                      name=\"firstName\"\r\n                      value={values.firstName}\r\n                      onChange={handleChange}\r\n                      onBlur={handleBlur}\r\n                      isInvalid={touched.firstName && errors.firstName}\r\n                      errormessage={errors.firstName}\r\n                    />\r\n                    <Input\r\n                      label=\"Last Name\"\r\n                      type=\"text\"\r\n                      placeholder=\"lastName\"\r\n                      name=\"lastName\"\r\n                      value={values.lastName}\r\n                      onChange={handleChange}\r\n                      onBlur={handleBlur}\r\n                      isInvalid={touched.lastName && errors.lastName}\r\n                      errormessage={errors.lastName}\r\n                    />\r\n\r\n                    <Input\r\n                      label=\"Email\"\r\n                      type=\"email\"\r\n                      placeholder=\"email\"\r\n                      name=\"email\"\r\n                      value={values.email}\r\n                      onChange={handleChange}\r\n                      onBlur={handleBlur}\r\n                      isInvalid={touched.email && errors.email}\r\n                      errormessage={errors.email}\r\n                    />\r\n\r\n                    <Input\r\n                      label=\"Password\"\r\n                      type=\"password\"\r\n                      placeholder=\"password\"\r\n                      name=\"password\"\r\n                      value={values.password}\r\n                      onChange={handleChange}\r\n                      onBlur={handleBlur}\r\n                      isInvalid={touched.password && errors.password}\r\n                      errormessage={errors.password}\r\n                    />\r\n                     <Input\r\n                      label=\"Phone Number\"\r\n                      type=\"phonenumber\"\r\n                      placeholder=\"phonenumber\"\r\n                      name=\"phonenumber\"\r\n                      value={values.phonenumber}\r\n                      onChange={handleChange}\r\n                      onBlur={handleBlur}\r\n                      isInvalid={touched.phonenumber && errors.phonenumber}\r\n                      errormessage={errors.phonenumber}\r\n                    />\r\n                    <Button type=\"submit\">Submit</Button>\r\n                  </Form>\r\n                )}\r\n            </Formik>\r\n          </Col>\r\n        </Row>\r\n\r\n      </Container>\r\n    </Layout>\r\n  )\r\n\r\n}\r\n\r\nexport default Signup;"]},"metadata":{},"sourceType":"module"}