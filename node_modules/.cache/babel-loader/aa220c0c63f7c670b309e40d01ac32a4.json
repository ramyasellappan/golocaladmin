{"ast":null,"code":"import { categoryConstants } from '../actions/constants';\nconst initState = {\n  categories: [],\n  loading: false,\n  error: null\n};\n\nconst buildNewCategories = (parentId, categories, category) => {\n  let myCategories = [];\n\n  if (parentId == undefined) {\n    return [...categories, {\n      _id: category._id,\n      name: category.name,\n      slug: category.slug,\n      children: []\n    }];\n  }\n\n  for (let cat of categories) {\n    if (cat._id == parentId) {\n      myCategories.push({ ...cat,\n        children: cat.children ? buildNewCategories(parentId, [...cat.children, {\n          _id: category.id,\n          name: category.name,\n          slug: category.slug,\n          parentId: category.parentId,\n          children: category.children\n        }], category) : []\n      });\n    } else {\n      myCategories.push({ ...cat,\n        children: cat.children ? buildNewCategories(parentId, cat.children, category) : []\n      });\n    }\n  }\n\n  return myCategories;\n};\n\nexport default ((state = initState, action) => {\n  switch (action.type) {\n    case categoryConstants.GET_ALL_CATEGORIES_SUCCESS:\n      state = { ...state,\n        categories: action.payload.categories\n      };\n      break;\n\n    case categoryConstants.ADD_NEW_CATEGORY_REQUEST:\n      state = { ...state,\n        loading: true\n      };\n      break;\n\n    case categoryConstants.ADD_NEW_CATEGORY_SUCCESS:\n      const category = action.payload.category;\n      const updatedCategories = buildNewCategories(category.parentId, state.categories, category);\n      console.log('updatedCategories', updatedCategories);\n      state = { ...state,\n        categories: updatedCategories,\n        loading: false\n      };\n      break;\n\n    case categoryConstants.ADD_NEW_CATEGORY_FAILURE:\n      state = { ...initState\n      };\n      break;\n  }\n\n  return state;\n});","map":{"version":3,"sources":["D:/REACT PROJECTS/my-app/src/reducers/category.reducer.js"],"names":["categoryConstants","initState","categories","loading","error","buildNewCategories","parentId","category","myCategories","undefined","_id","name","slug","children","cat","push","id","state","action","type","GET_ALL_CATEGORIES_SUCCESS","payload","ADD_NEW_CATEGORY_REQUEST","ADD_NEW_CATEGORY_SUCCESS","updatedCategories","console","log","ADD_NEW_CATEGORY_FAILURE"],"mappings":"AAAA,SAASA,iBAAT,QAAkC,sBAAlC;AAGA,MAAMC,SAAS,GAAG;AACdC,EAAAA,UAAU,EAAE,EADE;AAEdC,EAAAA,OAAO,EAAE,KAFK;AAGdC,EAAAA,KAAK,EAAE;AAHO,CAAlB;;AAOA,MAAMC,kBAAkB,GAAG,CAACC,QAAD,EAAUJ,UAAV,EAAsBK,QAAtB,KAAmC;AAC1D,MAAIC,YAAY,GAAG,EAAnB;;AAEA,MAAIF,QAAQ,IAAIG,SAAhB,EAA0B;AACtB,WAAM,CACF,GAAGP,UADD,EAEF;AACIQ,MAAAA,GAAG,EAAGH,QAAQ,CAACG,GADnB;AAEIC,MAAAA,IAAI,EAAGJ,QAAQ,CAACI,IAFpB;AAGIC,MAAAA,IAAI,EAAEL,QAAQ,CAACK,IAHnB;AAIIC,MAAAA,QAAQ,EAAG;AAJf,KAFE,CAAN;AAUH;;AAED,OAAK,IAAIC,GAAT,IAAgBZ,UAAhB,EAA4B;AAExB,QAAIY,GAAG,CAACJ,GAAJ,IAAWJ,QAAf,EAAyB;AACrBE,MAAAA,YAAY,CAACO,IAAb,CAAkB,EACd,GAAGD,GADW;AAEdD,QAAAA,QAAQ,EAAEC,GAAG,CAACD,QAAJ,GAAeR,kBAAkB,CAACC,QAAD,EAAU,CAAC,GAAGQ,GAAG,CAACD,QAAR,EAAiB;AAClEH,UAAAA,GAAG,EAAGH,QAAQ,CAACS,EADmD;AAElEL,UAAAA,IAAI,EAAEJ,QAAQ,CAACI,IAFmD;AAGlEC,UAAAA,IAAI,EAAEL,QAAQ,CAACK,IAHmD;AAIlEN,UAAAA,QAAQ,EAACC,QAAQ,CAACD,QAJgD;AAKlEO,UAAAA,QAAQ,EAAEN,QAAQ,CAACM;AAL+C,SAAjB,CAAV,EAOvCN,QAPuC,CAAjC,GAOM;AATF,OAAlB;AAYH,KAbD,MAaK;AACDC,MAAAA,YAAY,CAACO,IAAb,CAAkB,EACd,GAAGD,GADW;AAEdD,QAAAA,QAAQ,EAAEC,GAAG,CAACD,QAAJ,GAAgBR,kBAAkB,CAACC,QAAD,EAAUQ,GAAG,CAACD,QAAd,EAAuBN,QAAvB,CAAlC,GAAqE;AAFjE,OAAlB;AAIH;AAEJ;;AACD,SAAOC,YAAP;AACH,CAxCD;;AA4CA,gBAAe,CAACS,KAAK,GAAGhB,SAAT,EAAoBiB,MAApB,KAA+B;AAE1C,UAAQA,MAAM,CAACC,IAAf;AACI,SAAKnB,iBAAiB,CAACoB,0BAAvB;AACIH,MAAAA,KAAK,GAAG,EACJ,GAAGA,KADC;AAEJf,QAAAA,UAAU,EAAEgB,MAAM,CAACG,OAAP,CAAenB;AAFvB,OAAR;AAIA;;AACJ,SAAKF,iBAAiB,CAACsB,wBAAvB;AACIL,MAAAA,KAAK,GAAG,EACJ,GAAGA,KADC;AAEJd,QAAAA,OAAO,EAAE;AAFL,OAAR;AAIA;;AACJ,SAAKH,iBAAiB,CAACuB,wBAAvB;AACI,YAAMhB,QAAQ,GAAGW,MAAM,CAACG,OAAP,CAAed,QAAhC;AACA,YAAMiB,iBAAiB,GAAGnB,kBAAkB,CAACE,QAAQ,CAACD,QAAV,EAAmBW,KAAK,CAACf,UAAzB,EAAoCK,QAApC,CAA5C;AACAkB,MAAAA,OAAO,CAACC,GAAR,CAAY,mBAAZ,EAAgCF,iBAAhC;AACAP,MAAAA,KAAK,GAAG,EACJ,GAAGA,KADC;AAEJf,QAAAA,UAAU,EAACsB,iBAFP;AAGJrB,QAAAA,OAAO,EAAE;AAHL,OAAR;AAOA;;AACJ,SAAKH,iBAAiB,CAAC2B,wBAAvB;AACIV,MAAAA,KAAK,GAAG,EACJ,GAAGhB;AADC,OAAR;AAIA;AA9BR;;AAgCA,SAAOgB,KAAP;AACH,CAnCD","sourcesContent":["import { categoryConstants } from '../actions/constants';\r\n\r\n\r\nconst initState = {\r\n    categories: [],\r\n    loading: false,\r\n    error: null\r\n};\r\n\r\n\r\nconst buildNewCategories = (parentId,categories, category) => {\r\n    let myCategories = [];\r\n\r\n    if (parentId == undefined){\r\n        return[\r\n            ...categories,\r\n            {\r\n                _id : category._id,\r\n                name : category.name,\r\n                slug :category.slug,\r\n                children : []\r\n\r\n            }\r\n        ];\r\n    }\r\n\r\n    for (let cat of categories) {\r\n\r\n        if (cat._id == parentId) {\r\n            myCategories.push({\r\n                ...cat,\r\n                children: cat.children ? buildNewCategories(parentId,[...cat.children,{\r\n                    _id : category.id,\r\n                    name: category.name,\r\n                    slug: category.slug,\r\n                    parentId:category.parentId,\r\n                    children: category.children\r\n\r\n                }], category) : []\r\n            \r\n            });\r\n        }else{\r\n            myCategories.push({\r\n                ...cat,\r\n                children: cat.children  ? buildNewCategories(parentId,cat.children,category) : []\r\n            });\r\n        }\r\n\r\n    }\r\n    return myCategories;\r\n}\r\n\r\n\r\n\r\nexport default (state = initState, action) => {\r\n\r\n    switch (action.type) {\r\n        case categoryConstants.GET_ALL_CATEGORIES_SUCCESS:\r\n            state = {\r\n                ...state,\r\n                categories: action.payload.categories\r\n            }\r\n            break;\r\n        case categoryConstants.ADD_NEW_CATEGORY_REQUEST:\r\n            state = {\r\n                ...state,\r\n                loading: true\r\n            }\r\n            break;\r\n        case categoryConstants.ADD_NEW_CATEGORY_SUCCESS:\r\n            const category = action.payload.category;\r\n            const updatedCategories = buildNewCategories(category.parentId,state.categories,category);\r\n            console.log('updatedCategories',updatedCategories);\r\n            state = {\r\n                ...state,\r\n                categories:updatedCategories,\r\n                loading: false,\r\n\r\n\r\n            }\r\n            break;\r\n        case categoryConstants.ADD_NEW_CATEGORY_FAILURE:\r\n            state = {\r\n                ...initState,\r\n\r\n            }\r\n            break;\r\n    }\r\n    return state;\r\n}"]},"metadata":{},"sourceType":"module"}