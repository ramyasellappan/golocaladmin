{"ast":null,"code":"import { categoryConstants } from '../actions/constants';\nconst initState = {\n  categories: [],\n  loading: false,\n  error: null\n};\n\nconst buildNewCategories = (parentId, categories, category) => {\n  let myCategories = [];\n\n  if (parentId == undefined) {\n    return [...categories, {\n      _id: category._id,\n      name: category.name,\n      slug: category.slug,\n      children: []\n    }];\n  }\n\n  for (let cat of categories) {\n    const newCategory = {\n      _id: category.id,\n      name: category.name,\n      slug: category.slug,\n      parentId: category.parentId,\n      children: []\n    };\n\n    if (cat._id == parentId) {\n      myCategories.push({ ...cat,\n        children: cat.children.length > 0 ? [...cat.children, newCategory] : [newCategory]\n      });\n    } else {\n      myCategories.push({ ...cat,\n        children: cat.children ? buildNewCategories(parentId, cat.children, category) : []\n      });\n    }\n  }\n\n  return myCategories;\n};\n\nexport default ((state = initState, action) => {\n  switch (action.type) {\n    case categoryConstants.GET_ALL_CATEGORIES_SUCCESS:\n      state = { ...state,\n        categories: action.payload.categories\n      };\n      break;\n\n    case categoryConstants.ADD_NEW_CATEGORY_REQUEST:\n      state = { ...state,\n        loading: true\n      };\n      break;\n\n    case categoryConstants.ADD_NEW_CATEGORY_SUCCESS:\n      const category = action.payload.category;\n      const updatedCategories = buildNewCategories(category.parentId, state.categories, category);\n      console.log('updatedCategories', updatedCategories);\n      state = { ...state,\n        categories: updatedCategories,\n        loading: false\n      };\n      break;\n\n    case categoryConstants.ADD_NEW_CATEGORY_FAILURE:\n      state = { ...initState\n      };\n      break;\n  }\n\n  return state;\n});","map":{"version":3,"sources":["D:/REACT PROJECTS/my-app/src/reducers/category.reducer.js"],"names":["categoryConstants","initState","categories","loading","error","buildNewCategories","parentId","category","myCategories","undefined","_id","name","slug","children","cat","newCategory","id","push","length","state","action","type","GET_ALL_CATEGORIES_SUCCESS","payload","ADD_NEW_CATEGORY_REQUEST","ADD_NEW_CATEGORY_SUCCESS","updatedCategories","console","log","ADD_NEW_CATEGORY_FAILURE"],"mappings":"AAAA,SAASA,iBAAT,QAAkC,sBAAlC;AAGA,MAAMC,SAAS,GAAG;AACdC,EAAAA,UAAU,EAAE,EADE;AAEdC,EAAAA,OAAO,EAAE,KAFK;AAGdC,EAAAA,KAAK,EAAE;AAHO,CAAlB;;AAOA,MAAMC,kBAAkB,GAAG,CAACC,QAAD,EAAWJ,UAAX,EAAuBK,QAAvB,KAAoC;AAC3D,MAAIC,YAAY,GAAG,EAAnB;;AAEA,MAAIF,QAAQ,IAAIG,SAAhB,EAA2B;AACvB,WAAO,CACH,GAAGP,UADA,EAEH;AACIQ,MAAAA,GAAG,EAAEH,QAAQ,CAACG,GADlB;AAEIC,MAAAA,IAAI,EAAEJ,QAAQ,CAACI,IAFnB;AAGIC,MAAAA,IAAI,EAAEL,QAAQ,CAACK,IAHnB;AAIIC,MAAAA,QAAQ,EAAE;AAJd,KAFG,CAAP;AAUH;;AAED,OAAK,IAAIC,GAAT,IAAgBZ,UAAhB,EAA4B;AAExB,UAAMa,WAAW,GAAG;AAChBL,MAAAA,GAAG,EAAEH,QAAQ,CAACS,EADE;AAEhBL,MAAAA,IAAI,EAAEJ,QAAQ,CAACI,IAFC;AAGhBC,MAAAA,IAAI,EAAEL,QAAQ,CAACK,IAHC;AAIhBN,MAAAA,QAAQ,EAAEC,QAAQ,CAACD,QAJH;AAKhBO,MAAAA,QAAQ,EAAE;AALM,KAApB;;AAQA,QAAIC,GAAG,CAACJ,GAAJ,IAAWJ,QAAf,EAAyB;AACrBE,MAAAA,YAAY,CAACS,IAAb,CAAkB,EACd,GAAGH,GADW;AAEdD,QAAAA,QAAQ,EAAEC,GAAG,CAACD,QAAJ,CAAaK,MAAb,GAAsB,CAAtB,GAA0B,CAAC,GAAGJ,GAAG,CAACD,QAAR,EAAiBE,WAAjB,CAA1B,GAAyD,CAACA,WAAD;AAFrD,OAAlB;AAIC,KALL,MAKW;AACPP,MAAAA,YAAY,CAACS,IAAb,CAAkB,EACd,GAAGH,GADW;AAEdD,QAAAA,QAAQ,EAAEC,GAAG,CAACD,QAAJ,GAAeR,kBAAkB,CAACC,QAAD,EAAWQ,GAAG,CAACD,QAAf,EAAyBN,QAAzB,CAAjC,GAAsE;AAFlE,OAAlB;AAIH;AAEJ;;AACD,SAAOC,YAAP;AACH,CAxCD;;AA4CA,gBAAe,CAACW,KAAK,GAAGlB,SAAT,EAAoBmB,MAApB,KAA+B;AAE1C,UAAQA,MAAM,CAACC,IAAf;AACI,SAAKrB,iBAAiB,CAACsB,0BAAvB;AACIH,MAAAA,KAAK,GAAG,EACJ,GAAGA,KADC;AAEJjB,QAAAA,UAAU,EAAEkB,MAAM,CAACG,OAAP,CAAerB;AAFvB,OAAR;AAIA;;AACJ,SAAKF,iBAAiB,CAACwB,wBAAvB;AACIL,MAAAA,KAAK,GAAG,EACJ,GAAGA,KADC;AAEJhB,QAAAA,OAAO,EAAE;AAFL,OAAR;AAIA;;AACJ,SAAKH,iBAAiB,CAACyB,wBAAvB;AACI,YAAMlB,QAAQ,GAAGa,MAAM,CAACG,OAAP,CAAehB,QAAhC;AACA,YAAMmB,iBAAiB,GAAGrB,kBAAkB,CAACE,QAAQ,CAACD,QAAV,EAAoBa,KAAK,CAACjB,UAA1B,EAAsCK,QAAtC,CAA5C;AACAoB,MAAAA,OAAO,CAACC,GAAR,CAAY,mBAAZ,EAAiCF,iBAAjC;AACAP,MAAAA,KAAK,GAAG,EACJ,GAAGA,KADC;AAEJjB,QAAAA,UAAU,EAAEwB,iBAFR;AAGJvB,QAAAA,OAAO,EAAE;AAHL,OAAR;AAOA;;AACJ,SAAKH,iBAAiB,CAAC6B,wBAAvB;AACIV,MAAAA,KAAK,GAAG,EACJ,GAAGlB;AADC,OAAR;AAIA;AA9BR;;AAgCA,SAAOkB,KAAP;AACH,CAnCD","sourcesContent":["import { categoryConstants } from '../actions/constants';\r\n\r\n\r\nconst initState = {\r\n    categories: [],\r\n    loading: false,\r\n    error: null\r\n};\r\n\r\n\r\nconst buildNewCategories = (parentId, categories, category) => {\r\n    let myCategories = [];\r\n\r\n    if (parentId == undefined) {\r\n        return [\r\n            ...categories,\r\n            {\r\n                _id: category._id,\r\n                name: category.name,\r\n                slug: category.slug,\r\n                children: []\r\n\r\n            }\r\n        ];\r\n    }\r\n\r\n    for (let cat of categories) {\r\n\r\n        const newCategory = {\r\n            _id: category.id,\r\n            name: category.name,\r\n            slug: category.slug,\r\n            parentId: category.parentId,\r\n            children: []\r\n        };\r\n\r\n        if (cat._id == parentId) {\r\n            myCategories.push({\r\n                ...cat,\r\n                children: cat.children.length > 0 ? [...cat.children,newCategory] :[newCategory]\r\n            })\r\n            } else {\r\n            myCategories.push({\r\n                ...cat,\r\n                children: cat.children ? buildNewCategories(parentId, cat.children, category) : []\r\n            });\r\n        }\r\n\r\n    }\r\n    return myCategories;\r\n}\r\n\r\n\r\n\r\nexport default (state = initState, action) => {\r\n\r\n    switch (action.type) {\r\n        case categoryConstants.GET_ALL_CATEGORIES_SUCCESS:\r\n            state = {\r\n                ...state,\r\n                categories: action.payload.categories\r\n            }\r\n            break;\r\n        case categoryConstants.ADD_NEW_CATEGORY_REQUEST:\r\n            state = {\r\n                ...state,\r\n                loading: true\r\n            }\r\n            break;\r\n        case categoryConstants.ADD_NEW_CATEGORY_SUCCESS:\r\n            const category = action.payload.category;\r\n            const updatedCategories = buildNewCategories(category.parentId, state.categories, category);\r\n            console.log('updatedCategories', updatedCategories);\r\n            state = {\r\n                ...state,\r\n                categories: updatedCategories,\r\n                loading: false,\r\n\r\n\r\n            }\r\n            break;\r\n        case categoryConstants.ADD_NEW_CATEGORY_FAILURE:\r\n            state = {\r\n                ...initState,\r\n\r\n            }\r\n            break;\r\n    }\r\n    return state;\r\n}"]},"metadata":{},"sourceType":"module"}