{"ast":null,"code":"import { categoryConstants } from '../actions/constants';\nconst initState = {\n  categories: [],\n  loading: false,\n  error: null\n};\n\nconst buildNewCategories = (id, categories, category) => {\n  let myCategories = [];\n\n  for (let cat of categories) {\n    if (cat.parentId && cat.parentId == id) {\n      myCategories.push({ ...cat,\n        children: cat.children && cat.children.length > 0 ? buildNewCategories(id, [...cat.children, {\n          _id: category.id,\n          name: category.name,\n          slug: category.slug,\n          parentId: category.parentId,\n          children: category.children\n        }], category) : []\n      });\n    } else {\n      myCategories.push({ ...cat,\n        children: cat.children && cat.children.length > 0 ? buildNewCategories(id, cat.children, category) : []\n      });\n    }\n  }\n\n  return myCategories;\n};\n\nexport default ((state = initState, action) => {\n  switch (action.type) {\n    case categoryConstants.GET_ALL_CATEGORIES_SUCCESS:\n      state = { ...state,\n        categories: action.payload.categories\n      };\n      break;\n\n    case categoryConstants.ADD_NEW_CATEGORY_REQUEST:\n      state = { ...state,\n        loading: true\n      };\n      break;\n\n    case categoryConstants.ADD_NEW_CATEGORY_SUCCESS:\n      const category = action.payload.category;\n      const updatedCategories = buildNewCategories(category.parentId, state.categories, category);\n      console.log(updatedCategories);\n      state = { ...state,\n        categories: updatedCategories,\n        loading: false\n      };\n      break;\n\n    case categoryConstants.ADD_NEW_CATEGORY_FAILURE:\n      state = { ...initState\n      };\n      break;\n  }\n\n  return state;\n});","map":{"version":3,"sources":["D:/REACT PROJECTS/my-app/src/reducers/category.reducer.js"],"names":["categoryConstants","initState","categories","loading","error","buildNewCategories","id","category","myCategories","cat","parentId","push","children","length","_id","name","slug","state","action","type","GET_ALL_CATEGORIES_SUCCESS","payload","ADD_NEW_CATEGORY_REQUEST","ADD_NEW_CATEGORY_SUCCESS","updatedCategories","console","log","ADD_NEW_CATEGORY_FAILURE"],"mappings":"AAAA,SAASA,iBAAT,QAAkC,sBAAlC;AAGA,MAAMC,SAAS,GAAG;AACdC,EAAAA,UAAU,EAAE,EADE;AAEdC,EAAAA,OAAO,EAAE,KAFK;AAGdC,EAAAA,KAAK,EAAE;AAHO,CAAlB;;AAOA,MAAMC,kBAAkB,GAAG,CAACC,EAAD,EAAIJ,UAAJ,EAAgBK,QAAhB,KAA6B;AACpD,MAAIC,YAAY,GAAG,EAAnB;;AACA,OAAK,IAAIC,GAAT,IAAgBP,UAAhB,EAA4B;AAExB,QAAIO,GAAG,CAACC,QAAJ,IAAgBD,GAAG,CAACC,QAAJ,IAAgBJ,EAApC,EAAwC;AACpCE,MAAAA,YAAY,CAACG,IAAb,CAAkB,EACd,GAAGF,GADW;AAEdG,QAAAA,QAAQ,EAAEH,GAAG,CAACG,QAAJ,IAAgBH,GAAG,CAACG,QAAJ,CAAaC,MAAb,GAAsB,CAAtC,GAA0CR,kBAAkB,CAACC,EAAD,EAAI,CAAC,GAAGG,GAAG,CAACG,QAAR,EAAiB;AACvFE,UAAAA,GAAG,EAAGP,QAAQ,CAACD,EADwE;AAEvFS,UAAAA,IAAI,EAAER,QAAQ,CAACQ,IAFwE;AAGvFC,UAAAA,IAAI,EAAET,QAAQ,CAACS,IAHwE;AAIvFN,UAAAA,QAAQ,EAACH,QAAQ,CAACG,QAJqE;AAKvFE,UAAAA,QAAQ,EAAEL,QAAQ,CAACK;AALoE,SAAjB,CAAJ,EAOlEL,QAPkE,CAA5D,GAOM;AATF,OAAlB;AAYH,KAbD,MAaK;AACDC,MAAAA,YAAY,CAACG,IAAb,CAAkB,EACd,GAAGF,GADW;AAEdG,QAAAA,QAAQ,EAAEH,GAAG,CAACG,QAAJ,IAAgBH,GAAG,CAACG,QAAJ,CAAaC,MAAb,GAAsB,CAAtC,GAA0CR,kBAAkB,CAACC,EAAD,EAAIG,GAAG,CAACG,QAAR,EAAiBL,QAAjB,CAA5D,GAAyF;AAFrF,OAAlB;AAIH;AAEJ;;AACD,SAAOC,YAAP;AACH,CA1BD;;AA8BA,gBAAe,CAACS,KAAK,GAAGhB,SAAT,EAAoBiB,MAApB,KAA+B;AAE1C,UAAQA,MAAM,CAACC,IAAf;AACI,SAAKnB,iBAAiB,CAACoB,0BAAvB;AACIH,MAAAA,KAAK,GAAG,EACJ,GAAGA,KADC;AAEJf,QAAAA,UAAU,EAAEgB,MAAM,CAACG,OAAP,CAAenB;AAFvB,OAAR;AAIA;;AACJ,SAAKF,iBAAiB,CAACsB,wBAAvB;AACIL,MAAAA,KAAK,GAAG,EACJ,GAAGA,KADC;AAEJd,QAAAA,OAAO,EAAE;AAFL,OAAR;AAIA;;AACJ,SAAKH,iBAAiB,CAACuB,wBAAvB;AACI,YAAMhB,QAAQ,GAAGW,MAAM,CAACG,OAAP,CAAed,QAAhC;AACA,YAAMiB,iBAAiB,GAAGnB,kBAAkB,CAACE,QAAQ,CAACG,QAAV,EAAmBO,KAAK,CAACf,UAAzB,EAAoCK,QAApC,CAA5C;AACAkB,MAAAA,OAAO,CAACC,GAAR,CAAYF,iBAAZ;AACAP,MAAAA,KAAK,GAAG,EACJ,GAAGA,KADC;AAEJf,QAAAA,UAAU,EAACsB,iBAFP;AAGJrB,QAAAA,OAAO,EAAE;AAHL,OAAR;AAOA;;AACJ,SAAKH,iBAAiB,CAAC2B,wBAAvB;AACIV,MAAAA,KAAK,GAAG,EACJ,GAAGhB;AADC,OAAR;AAIA;AA9BR;;AAgCA,SAAOgB,KAAP;AACH,CAnCD","sourcesContent":["import { categoryConstants } from '../actions/constants';\r\n\r\n\r\nconst initState = {\r\n    categories: [],\r\n    loading: false,\r\n    error: null\r\n};\r\n\r\n\r\nconst buildNewCategories = (id,categories, category) => {\r\n    let myCategories = [];\r\n    for (let cat of categories) {\r\n\r\n        if (cat.parentId && cat.parentId == id) {\r\n            myCategories.push({\r\n                ...cat,\r\n                children: cat.children && cat.children.length > 0 ? buildNewCategories(id,[...cat.children,{\r\n                    _id : category.id,\r\n                    name: category.name,\r\n                    slug: category.slug,\r\n                    parentId:category.parentId,\r\n                    children: category.children\r\n\r\n                }], category) : []\r\n            \r\n            });\r\n        }else{\r\n            myCategories.push({\r\n                ...cat,\r\n                children: cat.children && cat.children.length > 0 ? buildNewCategories(id,cat.children,category) : []\r\n            });\r\n        }\r\n\r\n    }\r\n    return myCategories;\r\n}\r\n\r\n\r\n\r\nexport default (state = initState, action) => {\r\n\r\n    switch (action.type) {\r\n        case categoryConstants.GET_ALL_CATEGORIES_SUCCESS:\r\n            state = {\r\n                ...state,\r\n                categories: action.payload.categories\r\n            }\r\n            break;\r\n        case categoryConstants.ADD_NEW_CATEGORY_REQUEST:\r\n            state = {\r\n                ...state,\r\n                loading: true\r\n            }\r\n            break;\r\n        case categoryConstants.ADD_NEW_CATEGORY_SUCCESS:\r\n            const category = action.payload.category;\r\n            const updatedCategories = buildNewCategories(category.parentId,state.categories,category);\r\n            console.log(updatedCategories);\r\n            state = {\r\n                ...state,\r\n                categories:updatedCategories,\r\n                loading: false,\r\n\r\n\r\n            }\r\n            break;\r\n        case categoryConstants.ADD_NEW_CATEGORY_FAILURE:\r\n            state = {\r\n                ...initState,\r\n\r\n            }\r\n            break;\r\n    }\r\n    return state;\r\n}"]},"metadata":{},"sourceType":"module"}